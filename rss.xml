<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">

<channel>
	<title>Christian Christiansen</title>
	<link>https://christianchristiansen.net/log/index.html</link>
	<description>Latest updates from Christian Christiansen's log.</description>

    <image>
	<url>https://christianchristiansen.net/favicon.ico</url>
	<title>Christian Christiansen</title>
	<link>https://christianchristiansen.net</link>
	<width>32</width>
	<height>32</height>
    </image>
    <item>
        <title>Heard whilst hyperventilating on Fiddlesticks, Organ Pipes</title>
        <link>https://christianchristiansen.net/log/heard-whilst-hyperventilating-on-fiddlesticks-organ-pipes.html</link>
        <pubDate>Sun, 17 Jul 2022 18:56:14 AEST</pubDate>
        <guid>
        https://christianchristiansen.net/log/heard-whilst-hyperventilating-on-fiddlesticks-organ-pipes.html
        </guid>
        <description>
        
&lt;h1 class=&quot;title&quot;&gt;Heard whilst hyperventilating on Fiddlesticks, Organ Pipes&lt;/h1&gt;
&lt;p&gt;
Christian. Christian? Can you hear me? Christian… you’re safe. We’ve got you on
rope. Christian, talk to us. It’s all good. We’ve got you. Yes, yes. It’s
incredibly chossy. You don’t need to worry about us. We’re safe.
&lt;/p&gt;

&lt;p&gt;
You can do it. Keep going. Use those chimney skills. You can dangle the bag
between your legs, if you want to. Just keep moving. Christian. Christian?
&lt;/p&gt;

&lt;p&gt;
Yes, keep going. We’ve got you. Nic’s got you. Good work! Pull on those cams.
What’s that? There’s no more aid? Keep going. You can do it. What about the
foot to the left?
&lt;/p&gt;

&lt;p&gt;
Breathe, Christian, breathe. Christian, talk to us. Yes, it’s chossy. You’re
safe. Good work with the cam. You can leave the nuts in. You’re taking them
out? Good work. You can do it. Keep moving. Come on Christian.
&lt;/p&gt;

&lt;p&gt;
It’s still chossy? Don’t worry Christian. You’re doing well. Just keep moving.
Nice work. Really good work. Come on. Keep going. Breathe. Remember to breathe.
Nice work with the cam. Come on Christian, keep going. You can do it. Keep
moving.
&lt;/p&gt;

&lt;p&gt;
It’s a bit of a squeeze. It’s nicer rock there? Nice. Keep going. You’re doing
really well.
&lt;/p&gt;

&lt;p&gt;
Fantastic work Christian. You’re almost there. Nice work. Keep going. That’s
fantastic. Really good work. Keep going. You’re almost there.
&lt;/p&gt;

&lt;p&gt;
Nice work! Enjoy the view. Really really well done! Right, can one of you check
my knot?
&lt;/p&gt;

&lt;p&gt;
What, Christian? No. No, that doesn’t count as a fucking ice cream.
&lt;/p&gt;

        </description>
    </item>
    <item>
        <title>Noughts and Crosses</title>
        <link>https://christianchristiansen.net/log/noughts-and-crosses.html</link>
        <pubDate>Sun, 03 Jul 2022 17:45:03 AEST</pubDate>
        <guid>
        https://christianchristiansen.net/log/noughts-and-crosses.html
        </guid>
        <description>
        
&lt;h1 class=&quot;title&quot;&gt;Noughts and Crosses
&lt;br /&gt;
&lt;span class=&quot;subtitle&quot;&gt;Forging an indefatigable undefeatable foe&lt;/span&gt;
&lt;/h1&gt;
&lt;div id=&quot;table-of-contents&quot; role=&quot;doc-toc&quot;&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id=&quot;text-table-of-contents&quot; role=&quot;doc-toc&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#setting-the-scene&quot;&gt;Setting the scene&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#the-game&quot;&gt;The game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-programming-language&quot;&gt;The programming language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-program&quot;&gt;The program&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#the-code&quot;&gt;The code&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#start-at-the-beginning&quot;&gt;Start at the beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#data-representation&quot;&gt;Data representation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#icky-inputs-and-outlandish-outputs&quot;&gt;Icky inputs and outlandish outputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#forging-the-foe&quot;&gt;Forging the foe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wrap-up&quot;&gt;Wrap up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#what-next&quot;&gt;What next?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#play&quot;&gt;Play!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#further-afield&quot;&gt;Further afield&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-setting-the-scene&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;setting-the-scene&quot;&gt;Setting the scene&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-setting-the-scene&quot;&gt;
&lt;p&gt;
By pitting ourselves against opponents and frequently failing, we develop an
understanding of our shortcomings, our prejudices, our inexhaustible capacity
to flop. Games provide safe padded spaces to fall flat on our faces, while
still yielding a sense of accomplishment when we stand firm.
&lt;/p&gt;

&lt;p&gt;
However, folk are fallible, and friends fickle. To hone our skills at any hour,
against an opponent who will never tire, we have to create a computer ersatz,
an algorithmic adversary, to face our ire. Gather around the kiln, watch and
learn, and see how we forge an indefatigable undefeatable foe from pure
thought-stuff and (metaphorical) fire.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-the-game&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;the-game&quot;&gt;The game&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-the-game&quot;&gt;
&lt;p&gt;
Noughts and crosses, also inexplicably called tic-tac-toe by Yanks, is a game
in which two players alternately place noughts and crosses on a three-by-three
grid; the winner is the first player to place three of their symbol in a
straight line: horizontally, vertically or diagonally.
&lt;/p&gt;

&lt;p&gt;
Consult the relevant Wikipeda article and its citations for more information on
noughts and crosses than you could ever want.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-the-programming-language&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;the-programming-language&quot;&gt;The programming language&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-the-programming-language&quot;&gt;
&lt;p&gt;
Python is the de facto programming language for learning, teaching and
artificial intelligence (amongst many other fields). For the scope of this
tutorial, the use of any other programming language would be a gratuitous
affectation.
&lt;/p&gt;

&lt;p&gt;
The best books on Python are &lt;i&gt;Fluent Python&lt;/i&gt; by Luciano Ramalho and &lt;i&gt;Effective
Python&lt;/i&gt; by Brett Slatkin. For beginners, there are copious stellar resources
available; any search engine is your friend. The Pythonic idioms to be
aware of here, are list comprehension and dunders. More generally, within
this tutorial, the most difficult programming paradigms used are &lt;i&gt;recursion&lt;/i&gt;
and &lt;i&gt;currying&lt;/i&gt;; &lt;i&gt;The Little Schemer&lt;/i&gt; by Daniel P. Friedman and Matthias
Felleisen is an excellent primer on both of these concepts.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-the-program&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;the-program&quot;&gt;The program&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-the-program&quot;&gt;
&lt;p&gt;
The opponent exhaustively considers every possible move, and determines which
move has the lowest chance of leading to a loss. Many aspects of the program
leave much to be desired. However, the primary purpose of this tutorial is to
demonstrate how to create a simple, non-optimised, artificially intelligent
opponent, and not to win a beauty pageant.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-the-code&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-the-code&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-start-at-the-beginning&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;start-at-the-beginning&quot;&gt;Start at the beginning&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-start-at-the-beginning&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;#!/usr/bin/env python
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-data-representation&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;data-representation&quot;&gt;Data representation&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-data-representation&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
Bad programmers worry about the code. Good programmers worry about data
structures and their relationships.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;div class=&quot;quoter&quot;&gt;&lt;a href=&quot;https://lwn.net/Articles/193245/&quot;&gt;Linus Torvalds&lt;/a&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;
We represent an empty starting board as:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;board = &quot; &quot;*9
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
where a space denotes an empty cell, &lt;code&gt;&quot;0&quot;&lt;/code&gt; a nought and &lt;code&gt;&quot;1&quot;&lt;/code&gt; a cross. Players
are represented as &lt;code&gt;False&lt;/code&gt; for noughts and &lt;code&gt;True&lt;/code&gt; for crosses.
&lt;/p&gt;

&lt;p&gt;
We define which indices represent each row, column and diagonal. Remember that
Python begins indexing at 0, not 1, as Dijkstra ordained.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;def rowx(x):
    return [3*x, 3*x+1, 3*x+2]

def coly(y):
    return [0+y, 3+y, 6+y]

diagdown = [0, 4, 8]
diagup = [2, 4, 6]
rows = [rowx(i) for i in range(3)]
cols = [coly(i) for i in range(3)]
diags = [diagdown, diagup]
all_directions = rows + cols + diags
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
To return a list of cells which are still empty:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;def possible(board):
    return [i for i, x in enumerate(board) if x == &quot; &quot;]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
If we insist that noughts always starts first (it is called noughts and crosses
for a reason), we can determine whose turn it is by counting how many cells are
still empty. One great consequence of programming our own game, is being
beholden to our own prejudices and setting our own idiosyncratic rules. &lt;i&gt;Note:&lt;/i&gt;
noughts is denoted by &lt;code&gt;False&lt;/code&gt;, crosses by &lt;code&gt;True&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;def player(board):
    return (board.count(&quot; &quot;)-1) % 2
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Knowing the player allows us to figure out what the board looks like after a
move. &lt;i&gt;Note:&lt;/i&gt; &lt;code&gt;int(True) = 1&lt;/code&gt; and &lt;code&gt;int(False) = 0&lt;/code&gt;.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;def new_board(board, move):
    return board[:move] + str(int(player(board))) + board[move+1:]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The following allows us to find out if the game has finished, and if so, who
the winner is:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;def moves_left(board):
    return board.count(&quot; &quot;)

def winner(board):
    if moves_left(board) &amp;lt; 5:
        for direction in all_directions:
            try:
                if sum(int(board[i]) for i in direction) == 3:
                    return &quot;X&quot;
                if sum(int(board[i]) for i in direction) == 0:
                    return &quot;O&quot;
            except ValueError:
                continue
        if moves_left(board) == 0:
            return &quot;nobody&quot;
    return False
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-icky-inputs-and-outlandish-outputs&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;icky-inputs-and-outlandish-outputs&quot;&gt;Icky inputs and outlandish outputs&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-icky-inputs-and-outlandish-outputs&quot;&gt;
&lt;p&gt;
Humans are visual creatures. Even for geeks with no more than an ASCII console,
a 9 character long string does not suffice as a representation for a board. We
must make at least some minimal pretension to aesthetic nous.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;def display_possible(board):
    return &quot;, &quot;.join(str(x) for x in possible(board))

def display_player(p):
    return &quot;X&quot; if p else &quot;O&quot;

def display_cell(x):
    if x == &quot;1&quot;:
        return &quot;X&quot;
    if x == &quot;0&quot;:
        return &quot;O&quot;
    return x

def display(board):
    print()
    print(
        &quot;\n_ _ _\n&quot;.join(
            &quot;|&quot;.join(display_cell(board[3*x+y]) for y in range(3))
            for x in range(3)
        )
    )
    print()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Humans are not only visual creatures, but also butter-fingered. Use exceptions
to limit the damage a human can do when they mash the keyboard. &lt;code&gt;while True&lt;/code&gt;
loops forever, providing ample time for the not-so-fleet-footed.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;def get_human_player():
    while True:
        x = input(&quot;Would you like to be noughts O or crosses X?: &quot;)
        return True if x.lower() == &quot;x&quot; else False

def human_move(board):
    while True:
        try:
            move = input(f&quot;Choose a move from {display_possible(board)}: &quot;)
            if int(move) in possible(board):
                return new_board(board, int(move))
            print(&quot;That number was not valid, please choose another.&quot;)
        except (ValueError, TypeError):
            print(&quot;Please input a number, not a string.&quot;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-forging-the-foe&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;forging-the-foe&quot;&gt;Forging the foe&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-forging-the-foe&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
The enemy of my enemy is my friend.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The algorithm we implement for the computer is called minimax. Namely, the
computer chooses the move which maximises its chances that its opponent will
have minimal chances to win. To calculate the score, minimax recursively calls
itself exhaustively until all potential scenarios have been considered.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;def score(result):
    if result == &quot;O&quot;:
        return 1
    if result == &quot;X&quot;:
        return -1
    return 0

def maxmin(x, maximise):
    return max(x) if maximise else min(x)

def minimax(board, maximise=True):
    if result:=winner(board):
        return score(result)
    return maxmin(
        [
            minimax(new_board(board, move), not maximise)
            for move in possible(board)
        ],
        maximise
    )

def computer_best_move(board):
    best_minimax_score = None
    best_move = None
    for move in possible(board):
        minimax_score = minimax(new_board(board, move), maximise=player(board))
        if (
                best_move is None or
                (player(board) and minimax_score &amp;lt; best_minimax_score) or
                (not player(board) and minimax_score &amp;gt; best_minimax_score)
        ):
            best_minimax_score = minimax_score
            best_move = move
    return best_move

def computer_move(board):
    move = computer_best_move(board)
    return new_board(board, move)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-wrap-up&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-wrap-up&quot;&gt;
&lt;p&gt;
We then put the pieces together to create a playable game. The &lt;code&gt;EOFError&lt;/code&gt; and
&lt;code&gt;KeyboardInterrupt&lt;/code&gt; allow the human player to exit at any time. The dunders
in &lt;code&gt;__name__ == &quot;__main__&quot;&lt;/code&gt; are daft, but alas, all languages have their
defects.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;def main(human=False):
    try:
        board = &quot; &quot;*9
        while not winner(board):
            display(board)
            if player(board) == human:
                board = human_move(board)
            else:
                board = computer_move(board)
        display(board)
        print(f&quot;Finished! Winner is {winner(board)}&quot;)
    except (EOFError, KeyboardInterrupt):
        print(&quot;\nAbort\n&quot;)
        exit()

if __name__ == &quot;__main__&quot;:
    HUMAN = get_human_player()
    main(human=HUMAN)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The complete code is available &lt;a href=&quot;./noughts-and-crosses.py&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-what-next&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;what-next&quot;&gt;What next?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-what-next&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-play&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;play&quot;&gt;Play!&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-play&quot;&gt;
&lt;p&gt;
Once you have tired of playing against your new-fledged playmate, change it up.
Rewrite the program with other data representations:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;keep track of the moves, not the board;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rewrite the board as an object;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use a three-by-three matrix instead of a 9 character long string.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Or improve it! The program could:
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;choose better moves (not just the least worst);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;take symmetry into account, as a three-by-three grid is highly symmetrical;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use alpha beta pruning;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;have a plusher user interface.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Alternatively, you can translate the program to another programming language.
Or you can create an adversary for another game. Consult your nearest games
cupboard for inspiration.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-further-afield&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;further-afield&quot;&gt;Further afield&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-further-afield&quot;&gt;
&lt;p&gt;
To venture further into the cybernetic meadows, let Richard Brautigan, Andrew
Ng, &lt;i&gt;Deep Learning&lt;/i&gt; by Ian Goodfellow and Yoshua Bengio and Aaron Courville,
and &lt;i&gt;Neural Networks and Learning Machines&lt;/i&gt; by Simon Haykin be your guides.
&lt;i&gt;Bon voyage!&lt;/i&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

        </description>
    </item>
    <item>
        <title>Elvis</title>
        <link>https://christianchristiansen.net/log/elvis.html</link>
        <pubDate>Fri, 20 May 2022 15:23:06 AEST</pubDate>
        <guid>
        https://christianchristiansen.net/log/elvis.html
        </guid>
        <description>
        
&lt;h1 class=&quot;title&quot;&gt;Elvis&lt;/h1&gt;
&lt;p&gt;
‘Come on, choose a song!’
&lt;/p&gt;

&lt;p&gt;
Four pairs of eyes implore me to pick up the mic. We’re in a dingy room
with a bucket of ice cooling beer bottles set on a low table encircled by a
wrap-around sofa. Three walls need their decor updating; the fourth barely
holds up a beastly screen, blinking at us for input.
&lt;/p&gt;

&lt;p&gt;
‘All right, all right. Put the cat king on.’
&lt;/p&gt;

&lt;p&gt;
The four faces turn into question marks.
&lt;/p&gt;

&lt;p&gt;
‘Elvis Presley,’ I elaborate, switching to English. ‘The cat king!’ I repeat,
switching back to Mandarin.
&lt;/p&gt;

&lt;p&gt;
The four question marks continue to stare at me.
&lt;/p&gt;

&lt;p&gt;
‘The coolest man ever! The American. The 1950s. &lt;i&gt;Love Me Tender&lt;/i&gt;? &lt;i&gt;Jailhouse
Rock&lt;/i&gt;?’
&lt;/p&gt;

&lt;p&gt;
My four companions continue to stare at me. I am being treated to my own
medicine, I think. For the past month, we’ve been roving around bars, electric
with youth, playing dice, eating vodka-drenched watermelon, telling tall tales
over blaring hip-hop, playing pool in smoke-filled backrooms, grimacing over
mahjong tables, cooling off in outdoor swimming pools. And now, we’ve piled
into a kareoke booth giggling, and for the first time, I’m not the clueless
one, asking what the hell is going on.
&lt;/p&gt;

&lt;p&gt;
‘Let me show you.’
&lt;/p&gt;

&lt;p&gt;
猫王 turns up two results. I opt for &lt;i&gt;Blue Suede Shoes&lt;/i&gt;. The poses come out.
The fun kicks in.
&lt;/p&gt;

&lt;p&gt;
My new friends lean back, swigging on lager, and enjoy the show. Li Ziyi and Li
Zier, sister and brother, share a knowing glance. They had spotted me at
sea in Shenzhen a month ago, and taken an interest in the Chinese-speaking
foreigner. Why had I come? What was I up to? How about we grab a bite? Since
then, we’ve been hanging out every evening and weekend; joined by Jia
Shangshan, the charmer from Shanghai with a permanent cigarette jutting from
the corner of his mouth which wags as he enraptures his latest entourage with
his next fat fib; and Duo Yige, who paired with Li Ziyi, can belt out any
soaring, raucous, Whitney Houston-esque Mandarin ballad. Duo Yige has a
fantastically cheeky grin too. A grin not there when I finish my last Elvis
grunt. They’re all perplexed.
&lt;/p&gt;

&lt;p&gt;
‘Ah yeah, you see, back then, in the West, cool people were called cats,’ I
explain. ‘And Elvis was the coolest of them all, right? That’s why he’s
called Cat King in Chinese!’ My eyes gleam. It is one of my favourite English
to Chinese name translations.
&lt;/p&gt;

&lt;p&gt;
My friends disagree. ‘How– just how can a cat be cool?’ asks Li Ziyi.
&lt;/p&gt;

&lt;p&gt;
The notion seems ridiculous. I guess many notions of cool seem ridiculous. I’m
still baffled as to how geil (horny in German) means cool. Lekker (meaning
tasty in most Germanic languages, but also cool in Afrikaans and Dutch) makes
more sense to me. But why then, do Danes and Swedes opt for fed/fett (fat)
instead? And what do Norwegians say? What a mystery.
&lt;/p&gt;

&lt;p&gt;
‘Cat got your tongue?’ riffs Li Zier.
&lt;/p&gt;

&lt;p&gt;
I open my mouth to try and explain about Squeeze’s &lt;i&gt;Cool for Cats&lt;/i&gt;, about the
cool music video, about how the music video was filmed at John Lennon’s old
house, and how Lennon was cool, and how the Beatles were cool. There’s the
whole Beat generation: &lt;i&gt;On the Road&lt;/i&gt; is chockful of crazy cats and madcats. I
think of Top Cat, with his cool hat. Of course, there’s also Cool Cat, who’s
called Cool Cat. And then there’s Pink Panther, the cat with the coolest theme
tune of them all, on saxophone. That’s cool.
&lt;/p&gt;

&lt;p&gt;
But then I remember Andrew Lloyd Webber’s &lt;i&gt;Cats&lt;/i&gt;, and close my mouth again,
slinking away.
&lt;/p&gt;

        </description>
    </item>
    <item>
        <title>Edutainment</title>
        <link>https://christianchristiansen.net/log/edutainment.html</link>
        <pubDate>Sat, 05 Feb 2022 15:47:55 AEDT</pubDate>
        <guid>
        https://christianchristiansen.net/log/edutainment.html
        </guid>
        <description>

&lt;h1 class=&quot;title&quot;&gt;Edutainment&lt;/h1&gt;
&lt;p&gt;
An arrow skewers my foot. A flock follows, darting above our heads, destined
for our flesh, damning us to the ward and worse. I load the rifle and yell out
instructions, and in pain. Those still standing speed through the movements,
with eyes scanning the hills and bushes. But already they’re in our faces.
Bullets wait within barrels as we jab, thrust, parry, pirouette. Blade meets
javelin, dagger splices shield, body hits floor, Death laughs aloud. The
carnage has stopp-. Why? I can’t believe it. It can’t end here. Why does it
always have to crash at this bit? But I won this time!
&lt;/p&gt;

&lt;p&gt;
I never got &lt;i&gt;Empire Total War&lt;/i&gt; to run on my computer. Every time the first
scene would play out, and regardless of the outcome, a black screen would greet
me. In its stead, &lt;i&gt;Napoleon Total War&lt;/i&gt; taught me about the Egyptian and Italian
campaigns, about Prussia, about howitzers; but I never discovered the
Peninsular Campaign DLC, having eschewed the few video games I played for extra
page-turning.
&lt;/p&gt;

&lt;p&gt;
My eyes dart across, scanning shelves and titles, searching for a friendly book
amongst the reams of hostile drudgery patiently biding their time to ensnare
another unwitting op-shop-shopper. &lt;i&gt;Death To The French&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Death To The French&lt;/i&gt;? &lt;i&gt;Death To The French&lt;/i&gt;. My fingers cleave the spine out
from the sagging bookcase. 1810. Portugal. C. S. Forester rings a bell. But do
I really want to read a military book, perfumed with English exceptionalism and
mild xenophobia? 1933? Why would anybody have written in 1933 about the
Peninsular War instead of the Great War? What was the Peninsular War anyway? I
buy the book.
&lt;/p&gt;

&lt;p&gt;
Hunger and hunger and hunger pervades the story, incessantly searing through
the plot scorching the characters. The mad, but stoic, Englishman harries the
crazy, and emotional, Frenchmen with help from the sane, but pathetic,
Portuguese guerillas. And they are all starving. Rifleman Dodd, though mad, is
luckily mad for God, King and Country, and therefore prevails. God, King and
Country gift Dodd bread, to munch and munch and munch.
&lt;/p&gt;

&lt;p&gt;
After shutting the cover, the same questions still confound me. Did I really
want to read a military book, rife with English exceptionalism and mild
xenophobia? 1933? Why would anybody have written in 1933 about the Peninsular
War instead of the Great War? I guess I did find out about the Peninsular War
though.
&lt;/p&gt;

&lt;p&gt;

&lt;center&gt;&lt;b&gt;??????????????&lt;/b&gt;&lt;/center&gt;
&lt;center&gt;&lt;b&gt;¿¿¿¿¿¿¿¿¿¿¿¿¿¿̣&lt;/b&gt;&lt;/center&gt;

&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Only philosophers embark on this perilous expedition to the outermost reaches
of language and existence. Some of them fall off, but others cling on
desperately and yell at the people nestling deep in the snug softness, stuffing
themselves with delicious food and drink. ‘Ladies and Gentlemen,’ they yell,
‘we are floating in space!’ But none of the people down there care.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
&lt;div class=&quot;quoter&quot;&gt;Sophie’s World&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;Napoleon Total War&lt;/i&gt; and &lt;i&gt;Death To The French&lt;/i&gt; subtly hoodwinked me
into learning about Prussia and howitzers and starvation by packing in nuggets
of history between fun and guns. &lt;i&gt;Sophie’s World&lt;/i&gt;, on the other hand, is just
one big nugget of history, wearing a fake glasses-nose-moustache combo. Without
any guns.
&lt;/p&gt;

&lt;p&gt;
With the fake glasses-nose-moustache combo, &lt;i&gt;Sophie’s World&lt;/i&gt; attempts to
disguise itself as a novel, when it is in fact &lt;i&gt;A Fourteen Year Old (Almost
Fifteen Year Old) Schoolchild’s Introduction to (Western) Philosophy&lt;/i&gt;. A plot
is slapped on, with the audience and author standing in for the characters,
Sophie and Alberto, respectively. Indeed, the whole trick of novelisation is
laid bare to the reader, girders and all.
&lt;/p&gt;

&lt;p&gt;
Jostein Gaarder sets out to create a sense of wonder, the wonder of
contemplating the Universe, the wonder of watching a masterful magician change
a couple of white silk scarves into a live rabbit. But Gaarder brings out the
white rabbit onto the stage, coerces it into the top hat with its floppy ears
and chubby cheeks still hanging out, and then proceeds to reveal the
carrot-muncher in the top hat. Ta-da! How’s that for entertainment?
&lt;/p&gt;

&lt;p&gt;
The textbook is great; the rest, mere bagatelle. But translated into the medium
of a 90s video game, &lt;i&gt;Sophie’s World&lt;/i&gt; is unrecognisable. Ethereal and
ponderous, &lt;i&gt;Sophie’s World&lt;/i&gt; slows down the Universe outside, a force exudes
from it curbing the pace of Nature, warping space, shooing me up a wizard’s
sleeze. Life waits tethered outside as thoughts rocket, dazzle, jab, thrust,
parry, pirouette. Idea meets counterpoint, fun splices ennui, mood hits right,
Absurdists laugh silently. A spirit within promises nirv- No! Why? I can’t
believe it. It can’t end h-
&lt;/p&gt;

        </description>
    </item>
    <item>
        <title>Le Ton beau de Marot</title>
        <link>https://christianchristiansen.net/log/le-ton-beau-de-marot.html</link>
        <pubDate>Wed, 19 Jan 2022 20:56:29 AEDT</pubDate>
        <guid>
        https://christianchristiansen.net/log/le-ton-beau-de-marot.html
        </guid>
        <description>

&lt;h1 class=&quot;title&quot;&gt;Le Ton beau de Marot&lt;/h1&gt;
&lt;p class=&quot;verse&quot;&gt;
This poem&lt;br /&gt;
is going&lt;br /&gt;
to devil&lt;br /&gt;
my mettle.&lt;br /&gt;
My mind&#x27;s jammed&lt;br /&gt;
by these damned&lt;br /&gt;
rhymes: A A&lt;br /&gt;
B B… Pray,&lt;br /&gt;
God save me.&lt;br /&gt;
How can three&lt;br /&gt;
miserable&lt;br /&gt;
syllables,&lt;br /&gt;
fourteen pairs,&lt;br /&gt;
wring despairs&lt;br /&gt;
such as these?&lt;br /&gt;
My ill ease&lt;br /&gt;
only grows&lt;br /&gt;
when I pose&lt;br /&gt;
this question:&lt;br /&gt;
‘Translation:&lt;br /&gt;
all in vain?’&lt;br /&gt;
‘No!’ Doug claims,&lt;br /&gt;
as Clément&lt;br /&gt;
retains &lt;i&gt;ton&lt;/i&gt;&lt;br /&gt;
even in&lt;br /&gt;
(though you grin,&lt;br /&gt;
believe him!)&lt;br /&gt;
this poem.&lt;br /&gt;
&lt;/p&gt;

        </description>
    </item>
    <item>
        <title>Fun</title>
        <link>https://christianchristiansen.net/log/fun.html</link>
        <pubDate>Tue, 28 Dec 2021 17:48:00 AEDT</pubDate>
        <guid>
        https://christianchristiansen.net/log/fun.html
        </guid>
        <description>

&lt;h1 class=&quot;title&quot;&gt;Fun&lt;/h1&gt;
&lt;p&gt;
Seated, I survey the venue from the mezzanine, sipping on 4 dollar lemonade.
Two young girdled men take to the stage; one wields a guitar, the other dabbles
with keys and digital miscellania. With the pulpit still bare, they begin.
Electronic pulses ooze out. The man on the keys, the stouter of the two,
dressed in a white turtleneck and whiter trousers, sings catchy tunes out of
tune.
&lt;/p&gt;

&lt;p&gt;
There is a fantastic video recording of an early Kraftwerk gig. The audience
for electronic music did not exist yet; so a hodge-podge of subcultures
constitute the punters, hippies arm-in-arm with proto-punks, mullets with
cardigans and eyeliner. When the show started, the packed sedentary curiosity
seekers were clueless of the étiquette for witnessing these new sounds which
heralded the new age. Some meditated; others headbanged, fists included. Yet
more gawped, their gaping mouths preserved for posterity on tape.
&lt;/p&gt;

&lt;p&gt;
On stage, Barley Passable progress through a kaleidoscope of Euro pop,
electro pop, house, disco — a mélange-mischung of French house and Teutonic
electro — Daft Punk and Berlin nightclubs and too many hours of Eurovision
distilled through teenage Australian ears. “It would be better if they were
German,” opines my partner. I concur. But now, as the crowd swells below, and
the duo start their own Kraftwerk version of the macarena, helped by alcoholic
vapours swirling in the lights, old memories of fun seep through my stupor.
&lt;/p&gt;

&lt;p&gt;
I croak up, free my locks, shift my way down the stairs to join in, and spill
lemonade over my brogues.
&lt;/p&gt;

        </description>
    </item>
    <item>
        <title>We Liars</title>
        <link>https://christianchristiansen.net/log/we-liars.html</link>
        <pubDate>Sat, 04 Sep 2021 15:25:37 AEST</pubDate>
        <guid>
        https://christianchristiansen.net/log/we-liars.html
        </guid>
        <description>

&lt;h1 class=&quot;title&quot;&gt;We Liars&lt;/h1&gt;
&lt;p&gt;
Angus is sitting in the corner, in his wedding dress, playing with three red
juggling balls. He throws them all up at once. Again. And again. He keeps
muttering, ‘this time.’ I watch him with half an eye. After a while, I see he
won’t be achieving whatever it is he has in mind soon, so I don a pair of
headphones and press &lt;i&gt;The Start&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
Angus exhales as various electronics begin to purr. He dusts off his wedding
dress and walks towards me, flanked by a choir who yearn for something,
something just out of …
&lt;/p&gt;

&lt;p&gt;
A harp twists and the corner falls away, revealing a vast green. Angus invites
me to take his arms as we pass by an array of oblong strings and gusts of
triangles, gurgling mouths without bodies. ‘Where are we going?’ I ask. I’m
too afraid to ask where we are.
&lt;/p&gt;

&lt;p&gt;
Bleeps and bloops jerk my limbs to ecstatic rhythms. Angus towers all six foot
six of himself, wailing, lecturing, howling, over me, and the rest. The
crowd, the mustachioed mass, subsumes me; I osmose myself into this kicking,
dust-purple fantasy.
&lt;/p&gt;

&lt;p&gt;
Three red suns lineate the sky. A ladder stretches asymptotically high. We
climb, struggle together, up, blown by multi-coloured lengths of string
dancing to falsetto honky tonk bitter harmonies emanating from a lounge fan. We
reach the top, we turn our eyes heavenwards, we peer, we see scrawled in pen:
&lt;i&gt;YES&lt;/i&gt;.
&lt;/p&gt;

        </description>
    </item>
    <item>
        <title>Зверь</title>
        <link>https://christianchristiansen.net/log/the-beast.html</link>
        <pubDate>Mon, 31 May 2021 19:07:46 AEST</pubDate>
        <guid>
        https://christianchristiansen.net/log/the-beast.html
        </guid>
        <description>

&lt;h1 class=&quot;title&quot;&gt;Зверь&lt;/h1&gt;

&lt;div id=&quot;org47bd748&quot; class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;./the-beast.webp&quot; alt=&quot;the-beast.webp&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
What is there to do in Duisburg? To start with, perhaps a saunter around the
world&#x27;s largest inland harbour? Restaurants hug its banks, keen for a view of
the concrete basin. Further to the city centre, kebab stalls line
the pathways. There&#x27;s even a theater where the latest misguided, desperate and
lost troupe find themselves performing to the vestiges of a decaying
post-industrial city.
&lt;/p&gt;

&lt;p&gt;
My mother opts to take me and my brother to the library, undoubtedly due to
the lack of internet access in our newly rented accommodation. As the weeks
tick by, we are still waiting for a professional to rock up with a router,
plug it into the tangle of the Internet and chant a few choice incantations
to bless our bare abode with megabits and millisecond pings. My mother&#x27;s unable
to wait for the famed efficiency of Teutonic bureaucracy: she has electronic
mail to read.
&lt;/p&gt;

&lt;p&gt;
Scowering past the rows of shelves brimming with Goethe, Mann, Schiller and
odd spines with spiky Fraktur characters, I search for reading more suited to
my ability. My pathetic attempt a few days ago to ask where swimwear and
goggles could be bought at our new local swimming pool, blatantly
demonstrated that three years of German lessons in England had not amounted to
much.
&lt;/p&gt;

&lt;p&gt;
I spy some teenage fiction I&#x27;ve read before. Alex Rider, perfect! Knowing the
characters, premise and plot should make reading in a new language a less
foreboding task. Alas, the first few words of German already muddle my mind.
But then, I finally stumble upon the jackpot.
&lt;/p&gt;

&lt;p&gt;
Garfield.
&lt;/p&gt;

&lt;p&gt;
Full of indispensable vocabulary, such as &quot;Pastaspäher&quot;, &quot;Lasagne&quot; and &quot;Nein&quot;,
Garfield quickly equips me with the essentials needed to navigate these new
environs.
&lt;/p&gt;


&lt;div id=&quot;orgeef51a8&quot; class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;./the-beast-2.webp&quot; alt=&quot;the-beast-2.webp&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
I&#x27;m free this weekend. Typing &lt;code&gt;Events in Sydney&lt;/code&gt; into my web browser reveals a
Japanese film festival at the Art Gallery of New South Wales. Skimming through
the blurbs, the phrase &quot;experimental horror&quot; pops out. I know exactly who
will join me for this.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
&lt;i&gt;House&lt;/i&gt; is a fusillade on the brain cells and a smorgasbord of filmic
delights&amp;#x2026; Described as ‘unhinged extreme’, &lt;i&gt;House&lt;/i&gt; (aka &lt;i&gt;Hausu&lt;/i&gt;) is an
experimental horror film that amalgamates 1970s pop culture with mysterious
phenomenology.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
We arrive, settle in, and a white cat appears.
&lt;/p&gt;


&lt;div id=&quot;org5093cbf&quot; class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;./russian-course.webp&quot;
alt=&quot;russian-course.webp&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Packing for a weekend is an art I have perfected. My backpack fits a rolled-up
shirt, a couple of changes of underwear, a book, an apple or two and a water
bottle. My jacket, coat, sweater and trousers can easily last a weekend, even
with long-haul bus trips. A toothbrush and perhaps a perfume bottle can be
stowed away into one of the side pockets; everything else can be borrowed when
I reach my destination. Oslo, Copenhagen, London, Amsterdam, Berlin, Geneva,
Madrid, each weekend there&#x27;s another friend to visit, another festival to
attend, another chance to snatch a moment together with my partner, to remove
the telephone which separates our voices, to feel her breath on my skin, to
violate the definition of &quot;long-distance relationship&quot; for a few glorious days.
&lt;/p&gt;

&lt;p&gt;
Packing for life with my partner on a new continent has me stumped. What parts
of myself do I want to keep? Which clothes, hobbies, memories, dreams,
affectations will match our new surroundings?
&lt;/p&gt;

&lt;p&gt;
We&#x27;ve already decided on bringing a musical instrument each, which leaves one
suitcase and one piece of hand luggage. Crockery, cutlery, clothes will be easy
to find in charity shops once we&#x27;re in Sydney. Books too, and if not then
surely at a library. As I stack my books onto bookshelves and unpack and pack
them from storage boxes, I pick up a battered textbook, &lt;i&gt;The New Penguin
Russian Course&lt;/i&gt;. The receipt remains inside, the date marks the length of time
I have failed to realise a naïve teenage dream to learn Russian. A certain
stubbornness washes over me and I resolve to finish what I started eight years
ago. I place the book in my carry-on pile.
&lt;/p&gt;

&lt;p&gt;
Two flights later, and many more reading hours, I reach the end of Nicholas
Brown&#x27;s text. What&#x27;s next? I&#x27;m not sure if Garfield has been translated into
Russian, but surely the Harry Potters have. Indeed, I spot a couple of the
later books at Abbey&#x27;s Bookshop, but there&#x27;s no Philosopher&#x27;s Stone&amp;#x2026; I order
a copy at the counter and pick up &lt;i&gt;New Penguin Parallel Text Short Stories in
Russian&lt;/i&gt; to tide me over.
&lt;/p&gt;

&lt;p&gt;
As I leaf through, a дедушка consoles me, before arms reach out from the pages
and grasp onto me, arms of widows selling the remains of their war-hero
husbands, an arm tattooed on the sea, the still shaking arms of a priest
executioner.
&lt;/p&gt;

&lt;p&gt;
Once in, I see him. He is waiting for me as if it were time to introduce
himself. He is sitting in the armchair - a huge, confident cat - with his
chubby cheeks turned toward me.
&lt;/p&gt;

        </description>
    </item>
    <item>
        <title>Develop a Hello World alert for Windows on Arch Linux</title>
        <link>https://christianchristiansen.net/log/windows.html</link>
        <pubDate>Tue, 23 Mar 2021 12:57:24 AEDT</pubDate>
        <guid>
        https://christianchristiansen.net/log/windows.html
        </guid>
        <description>

&lt;h1 class=&quot;title&quot;&gt;Develop a Hello World alert for Windows on Arch Linux&lt;/h1&gt;
&lt;p&gt;
Only proceed when all possibilities to avoid Windows have dried up.
Proceed with care and suspicion: Clippy takes no prisoners.
&lt;/p&gt;

&lt;div id=&quot;outline-container-org6d9cd8b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6d9cd8b&quot;&gt;Step 1: Hello World&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6d9cd8b&quot;&gt;
&lt;p&gt;
Write the program.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;helloword.cpp&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C++&quot;&gt;#ifndef UNICODE // Not strictly necessary, but good practice
#define UNICODE
#endif

#include &amp;lt;windows.h&amp;gt; // Use Windows libraries

int WINAPI wWinMain(
    HINSTANCE hInstance,     // Handle to current instance
    HINSTANCE hPrevInstance, // Handle to previous instance of application
    PWSTR pCmdLine,          // Command line arguments as Unicode string
    int nCmdShow)            // Open minimised, maximised, or normally
{
    MessageBox (
        NULL,            // Handle to owner of the message box
        L&quot;Hello world!&quot;, // Message to be displayed
        L&quot;Hello&quot;,        // Pop-up title
        MB_OKCANCEL);    // Contents and behaviour of pop-up
    return 0;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Further documentation on &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/learnwin32/winmain--the-application-entry-point&quot;&gt;wWinMain&lt;/a&gt; and &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-messagebox&quot;&gt;MessageBox&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org024b75b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org024b75b&quot;&gt;Step 2: GNU Compiler Collection&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org024b75b&quot;&gt;
&lt;p&gt;
Compile the program.
&lt;/p&gt;

&lt;p&gt;
Running &lt;code&gt;gcc&lt;/code&gt; without any modifications will not work, as we require
supplementary Windows libraries.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo pacman -S mingw-w64-headers mingw-w64-cpp
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Then if we run
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;x86_64-w64-mingw32-g++ helloworld.cpp
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
we will get an &lt;a href=&quot;https://stackoverflow.com/questions/58324230/undefined-reference-to-winmain-c-mingw&quot;&gt;error&lt;/a&gt; about an &lt;code&gt;undefined reference to `WinMain&#x27;&lt;/code&gt; . What we&#x27;re
missing is the flag &lt;code&gt;-municode&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;x86_64-w64-mingw32-g++ -municode helloworld.cpp
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Out pops &lt;code&gt;a.exe&lt;/code&gt;. We have now created our first Windows program on Arch Linux!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgdab56e0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdab56e0&quot;&gt;Step 3: Wine&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgdab56e0&quot;&gt;
&lt;p&gt;
Run the program.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;https://www.winehq.org&quot;&gt;Wine&lt;/a&gt; allows us to run Windows programs on Linux. To install Wine on Arch Linux,
we will first have to enable the &lt;code&gt;multilib&lt;/code&gt; repository by uncommenting two
lines in &lt;code&gt;/etc/pacman.conf&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;/etc/pacman.conf&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;# [multilib]
# Include = /etc/pacman.d/mirrorlist
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Then update the repositories, and install the following packages:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo pacman -Syu
sudo pacman -S wine wine-mono
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Run
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;wine a.exe
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
and bask in triumph.
&lt;/p&gt;

&lt;p&gt;
&lt;center&gt;
&lt;img src=&quot;./windows.webp&quot; alt=&quot;windows.webp&quot; /&gt;
&lt;/center&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orge162603&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge162603&quot;&gt;Further steps&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge162603&quot;&gt;
&lt;p&gt;
Write more programs.
&lt;/p&gt;

&lt;p&gt;
Try following &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/learnwin32/your-first-windows-program&quot;&gt;tutorials&lt;/a&gt; on creating more involved Windows programs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

        </description>
    </item>
    <item>
        <title>Escape Meta Alt Control Shift</title>
        <link>https://christianchristiansen.net/log/escape-meta-alt-control-shift.html</link>
        <pubDate>Sat, 20 Mar 2021 16:56:22 AEDT</pubDate>
        <guid>
        https://christianchristiansen.net/log/escape-meta-alt-control-shift.html
        </guid>
        <description>

&lt;h1 class=&quot;title&quot;&gt;Escape Meta Alt Control Shift&lt;/h1&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;./pinky.webp&quot; alt=&quot;pinky.webp&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Rock climbing, guitar playing, ivory tickling, and GNU Emacs have all become
inextricable parts of my life. And all of them demand far too much of my left
pinky. After slightly straining my left wrist on a crimpy dynamic slab, I have
become acutely aware of the punishing ritual I subject my weakest finger to
from dawn till dusk.
&lt;/p&gt;

&lt;p&gt;
&lt;a href=&quot;http://ergoemacs.org/emacs/emacs_pinky.html&quot;&gt;Emacs pinky&lt;/a&gt; is an undeniable issue amongst programmers. I already alleviate
stress by using &lt;a href=&quot;https://www.emacswiki.org/emacs/Evil&quot;&gt;evil-mode&lt;/a&gt;, remapping &lt;code&gt;Caps Lock&lt;/code&gt; to &lt;code&gt;Escape&lt;/code&gt;, and raising my
wrists above the keyboard by shoving a sweater underneath my arms. However, I
still expect my left pinky to auto-complete with &lt;code&gt;Tab&lt;/code&gt;, return to command mode
with &lt;code&gt;Caps Lock&lt;/code&gt; (masquerading as &lt;code&gt;Escape&lt;/code&gt;), capitalise letters with &lt;code&gt;Shift&lt;/code&gt;,
change buffers (and run countless other Emacs commands) with &lt;code&gt;Control&lt;/code&gt;, switch
windows via &lt;a href=&quot;https://swaywm.org&quot;&gt;sway&lt;/a&gt; with &lt;code&gt;Super&lt;/code&gt; (aka &lt;code&gt;Meta&lt;/code&gt; or the Windows key), and, of course,
press &lt;code&gt;Alt&lt;/code&gt; to help summon the genie &lt;code&gt;&amp;lt;M-x&amp;gt;&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
I should surely be able to find some method to further reduce my poor digit&#x27;s
burden.
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgd25080a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd25080a&quot;&gt;Space as a leading key?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgd25080a&quot;&gt;
&lt;p&gt;
Doom Emacs and Spacemacs eschew &lt;code&gt;Control&lt;/code&gt; in favour of &lt;code&gt;Space&lt;/code&gt; for commands.
The briefest of flirtations with Doom has convinced me for life that there is
nothing as perverse as using another human&#x27;s Emacs config. Afer restoring my
&lt;code&gt;~/.emacs.d/&lt;/code&gt; and sanity, I found no easy way to extricate the leading space
behaviour from either Doom and Spacemacs.
&lt;/p&gt;

&lt;p&gt;
I delved further into abandoned forums to seek a more viable (and less deviant)
option.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc47425e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc47425e&quot;&gt;Caps as Escape and Control?&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc47425e&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://gitlab.com/interception/linux/plugins/caps2esc&quot;&gt;caps2esc&lt;/a&gt; showed promise. It remaps not only &lt;code&gt;Caps Lock&lt;/code&gt; to &lt;code&gt;Escape&lt;/code&gt;, but also
allows &lt;code&gt;Caps Lock&lt;/code&gt; to act as &lt;code&gt;Control&lt;/code&gt; whilst it is held down. &lt;a href=&quot;https://gitlab.com/interception/linux/plugins/space2meta/&quot;&gt;space2meta&lt;/a&gt;
remaps &lt;code&gt;Space&lt;/code&gt; to &lt;code&gt;Meta&lt;/code&gt; (aka &lt;code&gt;Super&lt;/code&gt;) whilst it is held down. And both run on
the &lt;code&gt;udev&lt;/code&gt; level so they are window manager agnostic and work in TTY!
&lt;/p&gt;

&lt;p&gt;
I started copy-pasting code and creating my own &lt;code&gt;caps2meta&lt;/code&gt;, &lt;code&gt;return2meta&lt;/code&gt;, and
&lt;code&gt;space2ctrl&lt;/code&gt;, until I thought there must be an even better solution.
And, indeed, there is.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc620fc9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc620fc9&quot;&gt;Dual Function Keys&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc620fc9&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://gitlab.com/interception/linux/plugins/dual-function-keys&quot;&gt;Dual Function Keys&lt;/a&gt; allows anybody to remap any key to any other key when it is
tapped, double-tapped or held down.
&lt;/p&gt;

&lt;p&gt;
To install on Arch Linux, simply:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo pacman -S interception-dual-function-keys
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Then create a YAML file describing the key remappings required. In my personal
config: &lt;code&gt;Caps Lock&lt;/code&gt; becomes &lt;code&gt;Escape&lt;/code&gt; when tapped, and &lt;code&gt;Meta&lt;/code&gt; / &lt;code&gt;Super&lt;/code&gt; when
held; &lt;code&gt;Space&lt;/code&gt; becomes &lt;code&gt;Ctrl&lt;/code&gt; when held; &lt;code&gt;Enter&lt;/code&gt; / &lt;code&gt;Return&lt;/code&gt; becomes &lt;code&gt;Meta&lt;/code&gt; /
&lt;code&gt;Super&lt;/code&gt; when held.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;~/.config/dfk.yaml&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-yaml&quot;&gt;TIMING:
    TAP_MILLISEC: 200
    DOUBLE_TAP_MILLISEC: 150

MAPPINGS:
    - KEY: KEY_CAPSLOCK
      TAP: KEY_ESC
      HOLD: KEY_LEFTMETA

    - KEY: KEY_SPACE
      TAP: KEY_SPACE
      HOLD: KEY_LEFTCTRL

    - KEY: KEY_ENTER
      TAP: KEY_ENTER
      HOLD: KEY_LEFTMETA
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Create a YAML file in &lt;code&gt;/etc/interception/udevmon.d/&lt;/code&gt; for the system
configuration.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;/etc/interception/udevmon.d/keys.yaml&lt;/code&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-yaml&quot;&gt;- JOB: intercept -g $DEVNODE | dual-function-keys -c /path/to/dfk.yaml | uinput -d $DEVNODE
  DEVICE:
    EVENTS:
      EV_KEY: [KEY_CAPSLOCK, KEY_SPACE, KEY_ENTER]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now to get the keybindings up and running:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo udevmon
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
To have the keybindings start automatically at boot-time:
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sh&quot;&gt;sudo systemctl enable udevmon
sudo systemctl start udevmon
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org0bf2b04&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0bf2b04&quot;&gt;Addendum&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org0bf2b04&quot;&gt;
&lt;p&gt;
Et voilà! My thumb and right pinky can now relieve my left pinky of most of its
duties. And I&#x27;ll soon be back on the wall, cursing crimpy dynamic slabs.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

        </description>
    </item>
    <item>
        <title>FBi Radio currently playing. Christian Christiansen.</title>
        <link>https://christianchristiansen.net/log/fbiradio.html</link>
        <pubDate>Mon, 01 Jan 2021 19:00:00 AEDT</pubDate>
        <guid>
        https://christianchristiansen.net/log/fbiradio.html
        </guid>
        <description>

&lt;h1 class=&quot;title&quot;&gt;FBi Radio currently playing&lt;/h1&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;./fbiradio.webp&quot; alt=&quot;fbiradio.webp&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Amongst all the wild and fantastical affairs humans partake in, music is by far
the most baffling. We indoctrinate our infants with lullabies, make pilgrimages
to clubs, festivals and operas, and buy our groceries whilst barely pubescent
teenagers serenade us over tinny tannoys. There are no clear evolutionary
advantages associated with an appreciation of Bach&#x27;s fugues or gabber; music is
an inexplicable and joyous byproduct of the human condition.
&lt;/p&gt;

&lt;p&gt;
Since arriving in Australia, &lt;a href=&quot;https://fbiradio.com&quot;&gt;FBi Radio&lt;/a&gt;, the independent non-profit radio station
which plays 50% Australian music (of which 50% is from New South Wales), has
satiated my desire for novel tracks and artists, and helped me to delve into the
local culture and survive a year without the euphoria of dancing with a
hundred fellow revelers. Tkay Maidza, 3NDLES5, Crazymike, Shady Nasty, Low
Flung, Party Dozen, Cool Sounds, &amp;#x2026; (the list is far too long to properly
compile) - they all immeasurably improved my year.
&lt;/p&gt;

&lt;p&gt;
With so many great artists and tracks on FBi, I&#x27;ve struggled with having to
visit the website, find the current program, and scroll to locate what&#x27;s
currently playing everytime my ears are piqued. To solve this, I have created a
&lt;a href=&quot;https://github.com/cchristiansen/fbiradio/&quot;&gt;Python script&lt;/a&gt;. Now I just have to type &lt;code&gt;fbiplaying&lt;/code&gt; and the answer falls right
into my lap. Now excuse me - I need to check out what the current track is.
It&#x27;s wild.
&lt;/p&gt;

&lt;p&gt;
Listen to 94.5 FM.
&lt;/p&gt;

        </description>
    </item>
    <item>
        <title>La Fille aux yeux d'or. Christian Christiansen.</title>
        <link>https://christianchristiansen.net/log/girl-with-the-golden-eyes.html</link>
        <pubDate>Sat, 18 Jul 2020 12:00:00 AEST</pubDate>
        <guid isPermaLink="false">
        https://christianchristiansen.net/log/girl-with-the-golden-eyes.html
        </guid>
        <description> Writing on Balzac's novella, to be found &lt;a
        href=&quot;https://christianchristiansen.net/log/girl-with-the-golden-eyes.html&quot;&gt;here&lt;/a&gt;.
        </description>
        <guid>
        https://christianchristiansen.net/log/girl-with-the-golden-eyes.html
        </guid>
        <description>


&lt;center&gt;&lt;h1&gt;La Fille aux yeux d&#x27;or&lt;/h1&gt;&lt;/center&gt;

&lt;p&gt;
&lt;img src=&quot;../portfolio/la-fille-painting.webp&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
The lights go back on. The punters shield their eyes, wipe sweat off their
foreheads, trickle out, past the cloakroom onto Oxford Street, lighting up,
with grins larger than faces.
&lt;/p&gt;

&lt;p&gt;
Tuesday 2&lt;sup style=&quot;font-size: 14px;&quot;&gt;nd&lt;/sup&gt; December 2014, at the 100 Club,
London. Iceage have just completed a seering set, whilst touring off the back
of their third album.  &lt;cite&gt;Plowing Into the Field of Love&lt;/cite&gt; saw the
Danish punk band expand, explore, embrace a greater lyrical and musical
landscape, delving into instrumentation and lyrical themes only hinted at in
the nihilistic &lt;cite&gt;You&#x27;re Nothing&lt;/cite&gt;, whilst retaining their sharpness,
their danger.
&lt;/p&gt;

&lt;p&gt;
&lt;q&gt;The only current punk band I can think of that sounds really dangerous.&lt;/q&gt;
- Iggy Pop. Danger evident throughout today&#x27;s gig. The gaggle who had turned
out this evening were hard to discern, Nick Cave fans, posers, remnants from past
tours, and those who simply wanted to steal a glance of the handsome quartet.
But from the first twang of guitar, it was evident who the bulk of the audience
were. They shoved, dived, shouted back lyrics, with raised fists. They were
here to see the best punk band in punk&#x27;s own city. And they have. On their way
out, palpable satisfaction hangs in the sweaty air.
&lt;/p&gt;

&lt;p&gt;
The unmistakable hiss of an amp comes back on. Confusion erupts.
&quot;Iceage don&#x27;t do encores?!&quot; But the foursome are back on, and we pile back
in. I reach the front, crash onto the stage, thrust by the mob behind. I lie
there, staring up, watching from below Elias Rønnenfelt bewitch the ruckus
abound. Watching our generation&#x27;s Elvis, our Bob Dylan, our Ian Curtis.
&lt;/p&gt;

&lt;blockquote&gt;&lt;pre&gt;&lt;p style=&quot;line-height: 1;&quot;&gt;Raise your fists
For the depraved roses
Raise it today
Everything drifts
Soon it&#x27;s gone
Don&#x27;t find a place to stay&lt;/p&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;center&gt;
&lt;img style=&quot;width: 105px; height: 60px;&quot; src=&quot;iceage-logos.webp&quot; /&gt;
&lt;/center&gt;
&lt;/p&gt;

&lt;p&gt;
Today, five years on, I am listening to the crooners from the antipodes. The
gang of four have swelled and gained a guitarist, and a maraca shaker. The
fury of the mosh pit is replaced with luxurious lounge listening.
Cowboy tassels, snakeskin boots, 1000-mile
stares are being filmed live by a camera crew courtesy of Brodie Sessions, as
Iceage saunter through songs inspired by Mina, Pieter Bruegel the Elder, and
Samuel Beckett. The spectacle finishes with a rendition of &lt;cite&gt;Lockdown
Blues&lt;/cite&gt;, their latest covid-19 inspired single.
&lt;/p&gt;

&lt;p&gt;
Incontent with simply providing a new single, a wondrous livestreamed show, and
a vast backlog of influences to uncover, Iceage have also contributed a list of
suggested books for reading over this pandemic period:
&lt;cite&gt;The Bluest Eye&lt;/cite&gt; by Toni Morrison, &lt;cite&gt;Papillon&lt;/cite&gt; by
Henry Charrière, &lt;cite&gt;The Happy Birthday of Death&lt;/cite&gt; by Gregory Corso,
&lt;cite&gt;God&#x27;s Mistress&lt;/cite&gt; by James Galvin, and &lt;cite&gt;The Girl with the
Golden Eyes&lt;/cite&gt; by Honoré de Balzac.
&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;the-girl-with-the-golden-eyes.webp&quot;&gt;
&lt;/p&gt;

&lt;p&gt;
I ordered a copy of &lt;cite&gt;The Girl with the Golden Eyes&lt;/cite&gt;; the book&#x27;s
cover posed even more questions than the title (never mind the blurb:
&lt;q&gt; The greatest French novelist of all time tells the story of a man enslaved
by a strange girl who bewitched him, ignited his passion, taught him all the
ways of love and then revealed herself as captive to the most grotesque
perversion known to human flesh&lt;/q&gt;). Count me in.
&lt;/p&gt;

&lt;p&gt;
Chapter 1, even in translation, unveiled a new realm of linguistic
possibilities to me; Balzac&#x27;s descriptions of Parisian society uprooted my
notions of what language is capable of expressing.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p style=&quot;line-height: 1; &quot;&gt;
Thus we are brought to the third circle of this hell, which, perhaps, will some
day find its Dante. In this third social circle, a sort of Parisian belly, in
which the interest of the town are digested, and where they are condensed into
the form known as &lt;i&gt;business&lt;/i&gt;, there moves and agitates, as by some acrid
and bitter intestinal process, the crowd of lawyers, doctors, notaries,
councillors, business men, bankers, big merchants, speculators and magistrates.
Here are to be found even more causes of moral and physical destruction than
elsewhere. These people - almost all of them - live in unhealthy offices, in
fetid ante-chambers, in little barred dens, and spend their days bowed down
beneath the weight of affairs; they rise at dawn to be in time, not to be left
behind, to gain all or not to lose, to over-reach a man or his money, to open or
wind up some business, to take advantage of some fleeting opportunity, to get a
man hanged or set him free. They infect their horses, they over-drive and age
and break them, like their own legs, before their time. Time is their tyrant: it
fails them, it escapes them; they can neither expand it nor cut it short. What
soul can remain great, pure, moral and generous, and, consequently, what face
retain its beauty in this depraving practice of a calling which compels one to
bear the weight of the public sorrows, to analyse them, to weight them,
estimate them, and mark them out by rule? Where do these folk put aside their
hearts?
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;
It is a shame that chapter 2 goes on to explore the limits of story telling
with wafer-thin characterisation, an incredulous plot, wanton literary and
cultural references, and scarcely discernible narration. And an abrupt ending.
&lt;/p&gt;


        </description>
    </item>
    <item>
        <title>First commit to KDE. Christian Christiansen.</title>
        <link>https://christianchristiansen.net/log/kde-first-commit.html</link>
        <pubDate>Sat, 11 Apr 2020 12:00:00 AEST</pubDate>
        <guid>
        https://christianchristiansen.net/log/kde-first-commit.html
        </guid>
        <description>


&lt;center&gt;&lt;h1&gt;First commit to KDE&lt;/h1&gt;&lt;/center&gt;

&lt;p&gt;After years of reading Linux Format, then Linux Voice, now finding refuge
in &lt;a href=&quot;https://latenightlinux.com/&quot;&gt;Late Night Linux&lt;/a&gt;; after scouring
through countless forums over a decade ago to ornate my desktop with ever
fancier bling (and wobblier windows); after wrecking multiple installations
from ever more ridiculous projects (who knew that running state-of-the-art
games through Wine on a tiny Sony Vaio laptop without a GPU wasn&#x27;t a sensible
idea?), I have finally contributed back to the open source community.
&lt;/p&gt;

&lt;p&gt;I stumbled across a recommendation to read the excellent
&lt;a href=&quot;https://producingoss.com&quot;&gt;Producing Open Source Software&lt;/a&gt; by Karl
Fogel.
The book demystified the inner workings of open source, and had me itching to
join in. So I set about on a mission to do so.&lt;/p&gt;

&lt;h2&gt;Step 1: Hang out on IRC.&lt;/h2&gt;
&lt;p&gt;See what&#x27;s happening.
To be honest, I couldn&#x27;t see much happening on IRC, but I quickly became
frustrated by Konversation&#x27;s inability to log my nickname in automatically.&lt;/p&gt;

&lt;h2&gt;Step 2: Find out what the issue was.&lt;/h2&gt;
&lt;p&gt;Apparently NickServ is no
longer the go-to identification service and I should have been using SASL
instead. &lt;a href=&quot;https://bugs.kde.org/show_bug.cgi?id=400362&quot;&gt;Why wasn&#x27;t that
the default?&lt;/a&gt; Nobody was able to say - everybody seemed to think it was a
sensible idea. Time to get stuck in.&lt;/p&gt;

&lt;h2&gt;Step 3: Get the build environment running.&lt;/h2&gt;
&lt;p&gt;This was a real pain, despite KDE&#x27;s
&lt;a href=&quot;https://community.kde.org/Get_Involved/development&quot;&gt;impeccable wiki
&lt;/a&gt; to help get started. Although LTS releases are
incredibly useful for a multitude of reasons, I found out the hard way
that they&#x27;re ill-suited for development.&lt;/p&gt;

&lt;h2&gt;Step 4: Change the code.&lt;/h2&gt;
&lt;p&gt;And test, test, test. Diving into new territory always contains several
unforeseen pitfalls. However, I soon had something working, and sent it off
to review. Again, KDE has
&lt;a href=&quot;https://community.kde.org/Infrastructure/Phabricator&quot;&gt;excellent
documentation&lt;/a&gt; for newcomers. After a minor edit...&lt;/p&gt;

&lt;h2&gt;Step 5: Celebrate.&lt;/h2&gt;
&lt;p&gt;It got accepted! Woohoo! Champagne for everyone¹!&lt;/p&gt;
&lt;p&gt;Ah wait, somebody on the #konversation channel has found another annoying
bug... Hold my flute.&lt;/p&gt;


        </description>
    </item>
</channel>
</rss>
